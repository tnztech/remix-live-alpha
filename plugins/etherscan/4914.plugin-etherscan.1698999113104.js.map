{"version":3,"file":"4914.plugin-etherscan.1698999113104.js","mappings":";;;;;;;;;;AAAA,iEAAe,UAAU,oBAAoB,oHAAoH,oBAAoB,4FAA4F,qNAAqN,gLAAgL,kBAAkB,SAAS,2GAA2G,qHAAqH,8HAA8H,iEAAiE,uBAAuB,gBAAgB,uBAAuB,gBAAgB,2BAA2B,gBAAgB,yFAAyF,iHAAiH,mKAAmK,wIAAwI,2CAA2C,oIAAoI,qCAAqC,8PAA8P,yGAAyG,gcAAgc,WAAW,mCAAmC,GAAG,IAAI","sources":["webpack:///../../libs/remix-ws-templates/src/templates/semaphore/scripts/run_setup.ts"],"sourcesContent":["export default \"import { ethers, BigNumber } from 'ethers'\\n\\n// eslint-disable-next-line @typescript-eslint/no-var-requires\\nconst snarkjs = require('snarkjs');\\n\\nconst logger = {\\n  info: (...args) => console.log(...args),\\n  debug: (...args) => console.log(...args)\\n};\\n\\n/**\\n * Creates a keccak256 hash of a message compatible with the SNARK scalar modulus.\\n * @param message The message to be hashed.\\n * @returns The message digest.\\n */\\nfunction hash(message: any): bigint {\\n  message = BigNumber.from(message).toTwos(256).toHexString()\\n  message = ethers.utils.zeroPad(message, 32)\\n  return BigInt(ethers.utils.keccak256(message)) >> BigInt(8)\\n}\\n\\n(async () => {\\n  try {\\n    // @ts-ignore\\n    await remix.call('circuit-compiler', 'generateR1cs', 'circuits/semaphore.circom');\\n\\n    const ptau_final = \\\"https://ipfs-cluster.ethdevops.io/ipfs/QmTiT4eiYz5KF7gQrDsgfCSTRv3wBPYJ4bRN1MmTRshpnW\\\";\\n    // @ts-ignore\\n    const r1csBuffer = await remix.call('fileManager', 'readFile', 'circuits/.bin/semaphore.r1cs', true);\\n    // @ts-ignore\\n    const r1cs = new Uint8Array(r1csBuffer);\\n    const zkey_0 = { type: \\\"mem\\\" };\\n    const zkey_1 = { type: \\\"mem\\\" };\\n    const zkey_final = { type: \\\"mem\\\" };\\n\\n    console.log('newZkey')\\n    await snarkjs.zKey.newZKey(r1cs, ptau_final, zkey_0);\\n\\n    console.log('contribute')\\n    await snarkjs.zKey.contribute(zkey_0, zkey_1, \\\"p2_C1\\\", \\\"pa_Entropy1\\\");\\n\\n    console.log('beacon')\\n    await snarkjs.zKey.beacon(zkey_1, zkey_final, \\\"B3\\\", \\\"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\\\", 10);\\n\\n    console.log('verifyFromR1cs')\\n    const verifyFromR1csResult = await snarkjs.zKey.verifyFromR1cs(r1cs, ptau_final, zkey_final);\\n    console.assert(verifyFromR1csResult);\\n\\n    console.log('verifyFromInit')\\n    const verifyFromInit = await snarkjs.zKey.verifyFromInit(zkey_0, ptau_final, zkey_final);\\n    console.assert(verifyFromInit);\\n\\n    console.log('exportVerificationKey')\\n    const vKey = await snarkjs.zKey.exportVerificationKey(zkey_final)\\n    await remix.call('fileManager', 'writeFile', './zk/build/verification_key.json', JSON.stringify(vKey))\\n    \\n    const templates = {\\n      groth16: await remix.call('fileManager', 'readFile', 'templates/groth16_verifier.sol.ejs')\\n    }\\n    const solidityContract = await snarkjs.zKey.exportSolidityVerifier(zkey_final, templates)\\n    \\n    await remix.call('fileManager', 'writeFile', './zk/build/zk_verifier.sol', solidityContract)\\n    \\n    console.log('buffer', (zkey_final as any).data.length)\\n    await remix.call('fileManager', 'writeFile', './zk/build/zk_setup.txt', JSON.stringify(Array.from(((zkey_final as any).data))))\\n    \\n    console.log('setup done.')\\n    \\n  } catch (e) {\\n    console.error(e.message)\\n  }\\n})()\";"],"names":[],"sourceRoot":""}